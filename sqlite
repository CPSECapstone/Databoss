import sqlite3

conn = sqlite3.connect('database.db')
c = conn.cursor()

def createTable():
    # Metric
    c.execute('''CREATE TABLE metric
                 (id INTEGER PRIMARY KEY,
                  name TEXT,
                  path TEXT UNIQUE)''')
    # DBConnection
    c.execute('''CREATE TABLE dbConnection
                 (id INTEGER PRIMARY KEY,
                  hostname TEXT,
                  port INTEGER,
                  user TEXT)''')
    # Workload
    c.execute('''CREATE TABLE workload
                 (id INTEGER PRIMARY KEY,
                  name TEXT,
                  path TEXT UNIQUE)''')
    # Logfile
    c.execute('''CREATE TABLE logfile
                 (id INTEGER PRIMARY KEY,
                  name TEXT,
                  path TEXT UNIQUE)''')
    # Capture
    c.execute('''CREATE TABLE capture
                 (id INTEGER PRIMARY KEY,
                  FOREIGN KEY (dbId) REFERENCES dbConnection(id),
                  FOREIGN KEY (logfileId) REFERENCES logfile(id),
                  FOREIGN KEY (workloadId) REFERENCES workload(id),
                  FOREIGN KEY (metricId) REFERENCES metric(id))''')
    # Replay
    c.execute('''CREATE TABLE replay
                 (id INTEGER PRIMARY KEY,
                  FOREIGN KEY (dbId) REFERENCES dbConnection(id),
                  FOREIGN KEY (logfileId) REFERENCES logfile(id),
                  FOREIGN KEY (workloadId) REFERENCES workload(id),
                  FOREIGN KEY (metricId) REFERENCES metric(id),
                  FOREIGN KEY (captureId) REFERENCES capture(id))''')

    c.commit()

def addPath(pathName):
    p = (pathName,)
    c.execute('INSERT INTO filepaths VALUES (?)', p)
    c.execute('SELECT ?', pathName)
    row = c.fetchone()
    assert row[0] == pathName
    c.commit()

def closeConn():
    conn.close()